
推荐系统实践：
    http://product.china-pub.com/199600


推荐系统应用公司：
    -a. 亚马逊图书推荐
        推荐系统最早，最好的
    -b. Netflix（光盘租碟公司）
        2006.10.02 举办竞赛，奖金100W美元 
            RMSE（均方根误差）降低10%
        矩阵分解模型：
            使用SVD算法


推荐系统分类：
    -a. 基于关联规则的推荐（Association Rule）
        啤酒和尿布
    -b. 基于内容的推荐（Content-based）
        相似类型的电影，内容相同书籍等
    -c. 基于协同过滤的推荐（Collaborative Filter）
        用户User对物品Item(Product)的评价判断用户的喜好。
        算法：ALS（交替最小二乘法）、SVD（奇异值分解）
    备注：
        推荐引擎一般集成多种推荐方式（算法）进行构建推荐系统


推荐系统（预测）：
    -a. 评分预测 -> CF算法（ALS算法和SVD算法）
        用户对物品的评价
    -b. 行为预测 -> 分类算法
        属于典型二分类预测

=========================================================
协同过滤推荐算法：
    -1、 核心（数据集）：
        用户User对物品Item（Product）的评价 
                    |
                构建一个稀疏矩阵
            -a. 每行表示的是某个用户对所有物品评价
            -b. 每列表示的是某个物品被所有用户的评价
    -2、 评价（最重要特征）：
        如何表示用户User对物品Item的评价？？？
        - 显式反馈：
            显式评价，比如评分（最直接）
        - 隐式反馈：
            浏览次数、播放次数、收藏次数等等
    -3、 做什么：
        矩阵分解： 
            将用户-物品评分稀疏矩阵分解为两个稠密矩阵：
                - 用户-因子特征矩阵
                - 物品-因子特征矩阵
        用户物品的评分矩阵A(m * n)
            m个用户，n个物品
        分解为: 特征k
            用户因子特征矩阵U (m * k)
            物品因子特征矩阵V (k * n)
        最终：
            A(m * n) ≈  U(m * k) * V(k * n )
    -4、 分解算法：
        - 算法一：SVD（奇异值分解算法） -> Netflix
            损失函数
        - 算法二：ALS（交替最小二乘法） -> Facebook
            先初始化一个因子特征矩阵，然后通过原始矩阵求解另一个因子矩阵，依次反复交替计算，最终损失函数值最小或者达到一定迭代次数得到两个矩阵（模型）
    -5、模型是什么
        就是两个矩阵，保存模型的就是将矩阵数据进行保存即可。
    -6、推荐方式：
        -a. 基于用户推荐
            给用户推荐Key个物品
                使用用户特征向量 逐一与物品因子矩阵每个物品特征向量相乘，获取向量点积（表明用户对每个物品的评价），对评价降序排序获取TopKey个物品，推荐给用户。
        -b. 基于物品推荐
            给物品推荐Key个用户 
                使用物品特征向量 追一与用户因子矩阵每个用户特征向相乘，获取向量点积（表明物品对每个用户的喜好程度），对评价降序排序获取TopKey个用户，将物品进行推荐。
        -c. 相似用户/相似物品
            计算用户之间或者物品之间的相似度。
            -i. 欧式距离
            -ii. 余弦相似度
            -iii. 皮尔逊相关度
            -iv. 杰卡徳（Jaccard）相似度
        -d. 使用ALS算法：
            参数设置：
            -i. 评分数据 - 三元组
                (userId, itemId, rating)
            -ii. 特征数
                rank（因子矩阵的维度，r << m 和 n)
            -iii. 迭代次数
                iterations
            -iv. 显式反馈还是隐式反馈
                implicit
            -v. lambda_
                正则化参数
        -e. ALS模型评估指标
            使用回归模型中RMSE（均方根误差）评估模型

机器学习算法中（常见算法中），哪些算法使用计算距离：
    -1. SVM：分类，支持向量机
    -2. K-NN: 分类，K近邻算法
    -3. KMean：聚类，K-均值
    -4. ALS: 推荐系统 

=======================================================

ALS协同过滤推荐算法在Spark MLlib机器学习库实现：
	-a. Rating
		存储：用户对物品的评价，三元组
		class Rating(namedtuple("Rating", ["user", "product", "rating"]))
		user、producet整型数据，通常使用ID表示
		rating数值型数据
	-b. ALS
		就是算法的实现类，有两个函数，分别对显式反馈和隐式反馈评价：
		- 显式反馈
			 def train(cls, ratings, rank, iterations=5, lambda_=0.01, blocks=-1, nonnegative=False, seed=None)
		- 隐式反馈
			 def trainImplicit(cls, ratings, rank, iterations=5, lambda_=0.01, blocks=-1, alpha=0.01, nonnegative=False, seed=None)
	-c. MatrixFactorizationModel
		使用ALS算法针对数据集训练得到模型，本质就是获取两个因子矩阵：
		- 用户特征因子矩阵
			def userFeatures(self)
		- 物品特征因子矩阵
			def productFeatures(self)
		- 预测用户对物品的评分
			def predict(self, user, product)
		- 推荐
			- 为用户推荐物品
				def recommendProducts(self, user, num)
			- 为物品推荐用户
				def recommendUsers(self, product, num)



